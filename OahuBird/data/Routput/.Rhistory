dat.wide[, OTU := myrownames]
View(dat.wide)
dat.long <- melt(dat.wide)
View(dat.long)
dat.long[, c("sample","group") := tstrsplit(variable, split="-")]
dat.long[, variable := NULL]
View(dat.long)
unique.OTUs <- dat.long[, list(N=sum(value)), by=list(group, OTU)][, list(Ngroups=sum(N>0)), by=OTU][Ngroups==1]$OTU
dat.wide[OTU %in% unique.OTUs]
df_dupd <- dat.wide[! (OTU %in% unique.OTUs)]
View(df_dupd)
library(data.table)
tmpfilt2.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/FilteredOTUs.csv', header = TRUE)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
View(meta.df)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
View(meta.df)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
View(meta.df)
meta.df$SampleID <- paste("OahuBird-", substr(meta.df$seqID, 4, 6), sep = "")
meta.df <- meta.df[,c(4:9)]
colnames(meta.df) <- c("SamplingDate", "BirdSpecies", "Source", "VegNum", "SampleType", "SampleID")
master.df <- merge(tmpfilt2.df, meta.df)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, 4, 6), sep = "")
meta.df <- meta.df[,c(4:9)]
colnames(meta.df) <- c("SamplingDate", "BirdSpecies", "Source", "VegNum", "SampleType", "SampleID")
master.df <- merge(tmpfilt2.df, meta.df)
View(meta.df)
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/master.csv', header = T)
library(data.table)
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/master.csv', header = T)
View(master.df)
detach("package:data.table", unload=TRUE)
library(reshape2)
otu.df <- master.df[,c(1,2,13)]
out.mat <- dcast(otu.df, SampleID ~ OTUid, value.var = "CountReads")
View(out.mat)
str(otu.mat)
otu.mat <- dcast(otu.df, SampleID ~ OTUid, value.var = "CountReads")
str(otu.mat)
row.names(otu.mat) <- otu.mat$SampleID
rm(out.mat)
View(otu.mat)
otu.mat$SampleID <- NULL
otufilt.mat = otu.mat[,colSums(otu.mat) > 4]
View(otufilt.mat)
rm(otu.df)
samplemeta.df <- master.df[,c(1,15:19)]
samplemeta.df <- unique(master.df[,c(1,15:19)])
View(samplemeta.df)
library(vegan)
draup <- vegdist(otufilt.mat, method="raup", binary=TRUE)
otufilt2.mat = otufilt.mat[rowSums(otufilt.mat) > 0,]
otufilt.mat = otufilt.mat[rowSums(otufilt.mat) > 0,] ## removes empty rows from filtering above
rm(otufilt2.mat)
draup <- vegdist(otufilt.mat, method="raup", binary=TRUE)
NMDSraup <- metaMDS(draup, distance = "raup", k = 2, trymax=30)
NMDSraup <- metaMDS(draup, distance = "raup", k = 2, trymax=100)
NMDSraup <- metaMDS(draup, distance = "raup", k = 2, trymax=200)
stressplot(NMDSraup)
OTUcounts = count(master.df, vars = c("OTUid"))
library(plyr)
setwd("~/Repos/guano/OahuBird/data/Routput/")
OTUperSample = count(master.df, vars = c("SampleID"))   # There are 99 remaining true samples (all bit one NTC has been filtered out)
sum(OTUperSample$freq > 1)    # There are 90 samples with at least 2 OTUs
sum(OTUperSample$freq > 4)    # There are 72 samples with at least 4 OTUs
sum(OTUperSample$freq > 9)    # There are 51 samples with at least 10 OTUs
speciesOnly.df <- na.omit(master.df)
freq_species <- as.data.frame(table(speciesOnly.df$species_name))     # frequency table of species detected
colnames(freq_species) <- c("species_name", "counts")
write.csv(freq_species, "species_frq_table.csv", row.names = F, quote = F)
sum(freq_species$counts > 1)  # note 212 species identified, but most are not abundant (only 41 species ID'd in more than 10 samples)
OTUcounts = count(master.df, vars = c("OTUid"))
colnames(OTUcounts) <- c("OTUid", "NumberOfDetections")
write.csv(OTUcounts, "OTUcounts.csv", row.names = F, quote = F)
View(OTUcounts)
OTUperSite = count(master.df, vars = c("Source"))
colnames(OTUperSite) <- c("Source", "NumberOfDetections")
write.csv(OTUperSite, "OTU_per_Site.csv", row.names = F, quote = F)
OTUperSampleType = count(master.df, vars = c("SampleType"))
colnames(OTUperSampleType) <- c("SampleType", "NumberOfDetections")
write.csv(OTUperSampleType, "OTU_per_SampleType.csv", row.names = F, quote = F)
otufilt10.mat = otu.mat[,colSums(otu.mat) > 10]  ## OTU must exist in at least 5 samples
otufilt10.mat = otufilt10.mat[rowSums(otufilt10.mat) > 0,] ## removes empty rows from filtering above
draup10 <- vegdist(otufilt10.mat, method="raup", binary=TRUE)
NMDSraup10 <- metaMDS(draup10, distance = "raup", k = 2, trymax=200)
stressplot(NMDSraup10)
plot(NMDSraup)
plot(NMDSraup10)
plot(NMDSraup, type = "t")
data.scores <- as.data.frame(scores(NMDSraup))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
View(data.scores)
View(samplemeta.df)
ord.df <- merge(data.scores, samplemeta.df)
ord.df <- merge(data.scores, samplemeta.df, all.x = TRUE)
View(ord.df)
colnames(data.scores) <- c("NMDS1", "NMDS2", "SampleID")
ord.df <- merge(data.scores, samplemeta.df, all.x = TRUE)
View(ord.df)
library(ggplot2)
0 <- ggplot(data = ord.df,
aes(x = NMDS1,
y = NMDS2,
)
)
0 <- ggplot(data = ord.df,
aes(x = NMDS1,
y = NMDS2
)
)
o <- ggplot(data = ord.df,
aes(x = NMDS1,
y = NMDS2
)
)
o
o + geom_point(label = SampleType)
o + geom_point(data = ord.df, aes(x = NMDS1,y = NMDS2), label = SampleType)
str(o)
str(ord.df)
o + geom_point(aes(colour = SampleType)
str(o)
geom_point(aes(colour = factor(cyl)))
ggplot() +
geom_text(data=species.scores,aes(x=NMDS1,y=NMDS2,label=species),alpha=0.5) +  # add the species labels
geom_point(data=data.scores,aes(x=NMDS1,y=NMDS2,shape=grp,colour=grp),size=4) + # add the point markers
geom_text(data=data.scores,aes(x=NMDS1,y=NMDS2,label=site),size=8,vjust=0,hjust=0) +  # add the site labels
scale_colour_manual(values=c("A" = "red", "B" = "blue")) +
coord_equal() +
theme_bw() +
theme(axis.text.x = element_blank(),  # remove x-axis text
axis.text.y = element_blank(), # remove y-axis text
axis.ticks = element_blank(),  # remove axis ticks
axis.title.x = element_text(size=18), # remove x-axis labels
axis.title.y = element_text(size=18), # remove y-axis labels
panel.background = element_blank(),
panel.grid.major = element_blank(),  #remove major-grid labels
panel.grid.minor = element_blank(),  #remove minor-grid labels
plot.background = element_blank())
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
######     Part 6 - Phyloseq plots     ######
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
## load in original OTUtable from amptk output:
library(data.table)
setwd("~/Repos/guano/OahuBird/")
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/master.csv', header = T)
master.df$SampleID <- gsub("\\.", "-", master.df$SampleID)
h_otutable.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/amptk/OahuBird_h.otu_table.taxonomy.txt')
row.names(h_otutable.df) <- h_otutable.df$`#OTU ID`
## make a list of samples remaining in our filtered, meta-data included `master.df`:
samplelist <- unique(master.df$SampleID)
## then pick out just the columns in the original OTUtable from that list:
otutable.df <- subset(h_otutable.df, select = samplelist)
row.names(otutable.df) <- row.names(h_otutable.df)
## sum up the rows and drop any OTUs where there are zero read counts; drop the rowsum and names columns after that
otutable.df$rowsums <- rowSums(otutable.df[1:184])
otutable.df$rowsums
otutable.df$names <- rownames(otutable.df)
otutable.df <- subset(otutable.df, rowsums != 0)
row.names(otutable.df) <- otutable.df$names
otutable.df$names <- NULL
otutable.df$rowsums <- NULL
## convert to binary matrix
otutable.mat <- as.matrix((otutable.df > 0) + 0)
# this is what you'll load into phyloseq as 'OTU'
## Generate a taxonomy table
tax.df <- unique(master.df[,c(2,6:12)])
rownames(tax.df) <- tax.df$OTUid
tax.df$OTUid <- NULL
colnames(tax.df) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
tax.mat <- as.matrix(tax.df)
row.names(tax.mat) <- rownames(tax.df)
# this is what you'll load into phyloseq as 'TAX'
## Add additional sample metadata:
## found that Alissa had entered two unique values for sample OahuBird.184... so the first one was arbitrarily dropped
metaps.df <- unique(master.df[,c(1,15:19)])
metaps.df <- metaps.df[c(1:45, 47:185),]
rownames(metaps.df) <- metaps.df$SampleID
# this is what you'll load into phyloseq as 'META'
## save files to disk:
setwd("~/Repos/guano/OahuBird/data/Routput/")
write.table(otutable.mat, file = "otutable.mat", row.names = TRUE, sep = "\t")
write.table(tax.mat, file = "tax.mat", row.names = TRUE, sep = "\t")
write.table(metaps.df, file = "metaps.df", row.names = TRUE, sep = "\t")
## load package `phyloseq`
## notrun: source('http://bioconductor.org/biocLite.R')
## notrun: biocLite('phyloseq')
## notrun: source("http://bioconductor.org/biocLite.R")
## not run: biocLite("multtest")
## not run: install.packages("ape")
#! not installed: source("http://bioconductor.org/biocLite.R")
#! not installed: biocLite("BiocUpgrade")
library(phyloseq)
setwd("~/Repos/guano/OahuBird/data/Routput/")
otutable.mat <- read.table(file="otutable.mat")
tax.mat <- read.table(file="tax.mat")
metaps.df <- read.table(file="metaps.df")
OTU = otu_table(otutable.mat, taxa_are_rows = TRUE)
TAX = tax_table(tax.mat)
META = sample_data(metaps.df)
rownames(META) = sample_names(OTU)
physeq = phyloseq(OTU, TAX, META)
physeq
## added a tree - this was derived from the output of the `amptk taxonomy` command and then briefly modified with some bash commands as follows:
## before I ran this bit of R code, I had to first modify the `amptk taxonomy` .fa output to get a tab-delimited format
##
## ```
## awk '/^>/ {printf("\n%s\n",$0);next; } { printf("%s",$0);}  END {printf("\n");}' < OahuBird_h.otus.taxonomy.fa > tmp.fa
## tail -n +2 tmp.fa | paste - - > tmp2.fa
## ```
## first, read in the tab-delimited fasta from the amptk taxonomy output that has been formatted above:
amptk.fasta <- read.delim("~/Repos/guano/OahuBird/data/amptk/nolulu/tmp2.fa",
header = FALSE, sep = "\t", stringsAsFactors = FALSE)
colnames(amptk.fasta) <- c("header", "seq")
library(dplyr)
library(tidyr)
amptk.df <- amptk.fasta %>%
separate(header, c("header", "tax"), " ", extra = "merge")  # the `extra = "merge"` prevents the species names getting dropped
rm(amptk.fasta)
## grab the OTU names from our `master.df` object:
otunames.df <- as.data.frame(unique(master.df$OTUid))
colnames(otunames.df) <- "header"
otunames.df$header <- paste('>', otunames.df$header, sep = '')
## find matches where these overlap:
matched.fasta <- merge(otunames.df, amptk.df)
## and export that data.frame object, then reprocess from tab-delimited to single-line fasta:
setwd("~/Repos/guano/OahuBird/data/Routput/")
write.table(matched.fasta, file = "matched.fasta.txt", quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t")
## this made a matched.fasta.txt file which we then processed back into a typical fasta format:
##
## ```
## awk -F "\t" '{print $1"\n"$3}' matched.fasta.txt > matched.fasta
## ```
## this file was then passed into `usearch` to make and updated tree:
##
## ```
## usearch -cluster_agg matched.fasta -treeout matched.tree
## ```
## and the output file 'tree.phy' was ultimately loaded back into phyloseq
setwd("~/Repos/guano/OahuBird/data/Routput/")
library(ape)
mytree <- read.tree(file = "matched.tree")
physeq2 = merge_phyloseq(physeq, mytree)
physeq2
## now plot some trees!
library(ggplot2)
## first two not particularly useful...
plot_tree(physeq2)
plot_tree(physeq2, color="Order")
t <- plot_tree(physeq2, color="SampleType", shape = "SampleType", ladderize="left", plot.margin=0.3)
t
?plot_tree()
## how about:
plot_tree(physeq2, color="SampleType", shape="SampleType", label.tips="taxa_names", ladderize = "left", justify = "left")
## now plot richness?
plot_richness(physeq2, x="Source", color="SampleType")
## or try...
p = plot_richness(physeq2, x="Source", color="SampleType", measures=c("Observed", "Shannon", "Simpson"))
p + geom_point(size=2.2, alpha=0.5) + labs(color = "Guano source")
# need to alter the SampleType legend key... state "bird" or "plant" sample...
## bar plots:
## basic
plot_bar(physeq2, x="BirdSpecies", fill="Order", facet_grid=~SampleType)
## better
q = plot_bar(physeq2, "BirdSpecies", fill="Order")
q + geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack") +
labs(title="Number of OTU detections defined by taxonomic Order per bird species")
# would want to relabel x-axis tick to reflect the first bar is "vegetation"; or could face out
# want to rename y axis label as "observed" (it's binary abundance...)
## basic ordination with phyloseq
distance(physeq2, method = "bray", binary = TRUE)
phyloseq::diversity(ps_obj, method = "jaccard", binary = TRUE)
## Calculate ordination
ojacc  <- ordinate(physeq2, "MDS", distance=djacc)
## ordination, modifying the phyloseq example
## get list of distance methods available and print
dist_methods <- unlist(distanceMethodList)
dist_methods
## select wanted methods
mydist_methods <- dist_methods[(c(8,16))]
mydist_methods
plist <- vector("list", length(mydist_methods))
names(plist) = mydist_methods
for( i in mydist_methods ){
# Calculate distance matrix
iDist <- distance(physeq2, method=i, binary = TRUE)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(physeq2, iMDS, color="SampleType", shape="Source")
# Add title to each plot
p <- p + ggtitle(paste("MDS using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
print(plist[["jsd"]])
o + geom_point(aes(colour = SampleType))
o + geom_point(aes(colour = SampleType)) +
geom_point(aes(shape = Source)) +
geom_point(aes(fill = BirdSpecies))
o <- ggplot(data = ord.df, aes(x = NMDS1, y = NMDS2, shape = Source))
o + geom_point(aes(colour = SampleType)) +
geom_point(aes(fill = BirdSpecies))
o <- ggplot(data = ord.df, aes(x = NMDS1, y = NMDS2, shape = Source, color = SampleType))
o + geom_point(aes(fill = BirdSpecies))
o + geom_point()
o2 <- ggplot() +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) + # add the convex hulls
o2
o2 <- ggplot() +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) + # add the convex hulls
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) + # add the convex hulls
o2
oo <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) + # add the convex hulls
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30)
o2
View(OTUperSite)
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) +  # add area fill
geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=OTUid),alpha=0.5)
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) +  # add area fill
geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=OTUid),alpha=0.5) +  # add the OTUid labels
o2
View(data.scores)
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) +  # add area fill
geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5)
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) +  # add area fill
geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
o2
o3 <- ggplot(ord.df) +
geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5)
03
o3
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.30) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= SampleType, colour= BirdSpecies),size=4)   # add the point markers
o2
plotcolors <- c("#979d00",
"#b78e6b",
"#8e9a67",
"#ede437",
"#7e400b",
"#ff473d",
"#455a0a",
"#cfc395",
"#98ad5a")
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.10) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= SampleType, colour= BirdSpecies),size=1.5) +  # add the point markers
scale_colour_manual(values = plotcolors)
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.20) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("yellow", "green"))
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.20) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("red", "blue"))
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.20) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("red", "blue")) +
scale_shape_manual(values = c(0,1,16,2,5,6,3,11,4))
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.20) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("red", "blue")) +
scale_shape_manual(values = c(0,1,16,2,5,6,3,11,4)) +
scale_fill_manual(values = c("#48b8da", "#0d353f", "#584568", "#b55251", "#dfb137" "#80e34b"))
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.20) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("red", "blue")) +
scale_shape_manual(values = c(0,1,16,2,5,6,3,11,4)) +
scale_fill_manual(values = c("#48b8da", "#0d353f", "#584568", "#b55251", "#dfb137", "#80e34b"))
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.60) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("red", "blue")) +
scale_shape_manual(values = c(0,1,16,2,5,6,3,11,4)) +
scale_fill_manual(values = c("#48b8da", "#0d353f", "#584568", "#b55251", "#dfb137", "#80e34b"))
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.60) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("red", "blue")) +
scale_shape_manual(values = c(0,1,16,2,5,6,3,11,4)) +
scale_fill_manual(values = c("#48b8da", "#0d353f", "#ffda00", "#b55251", "#dfb137", "#80e34b"))
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.40) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("red", "blue")) +
scale_shape_manual(values = c(0,1,16,2,5,6,3,11,4)) +
scale_fill_manual(values = c("#48b8da", "#0d353f", "#ffda00", "#b55251", "#dfb137", "#80e34b"))
o2
o2 <- ggplot(ord.df) +
geom_polygon(data=ord.df,aes(x = NMDS1, y = NMDS2, fill=Source, group=Source),alpha=0.40) +  # add area fill
#geom_text(data=ord.df,aes(x = NMDS1, y = NMDS2, label=SampleID),alpha=0.5) +  # add the SampleID labels
geom_point(data=ord.df,aes(x = NMDS1, y = NMDS2, shape= BirdSpecies, colour= SampleType),size=1.75) +  # add the point markers
scale_colour_manual(values = c("red", "blue")) +
scale_shape_manual(values = c(0,1,16,2,5,6,3,11,4)) +
scale_fill_manual(values = c("#48b8da", "#0d353f", "#ffda00", "#b55251", "#dfb137", "#80e34b")) +
labs(title = "Hawaiian arthropod composition vary by collection type",
subtitle = "Nonmetric Multidimensional Scaling (NMDS) of Raup-Crick Dissimilarity Index")
o2
o2
library(data.table)
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/master.csv', header = T)
plot.df <- master.df
plot.df$Counter <- "1"
View(plot.df)
barfill <- "#4271AE"
barlines <- "#1F3552"
barfill
order0 <- ggplot(plot.df, aes(x = SampleType, y = Counter, fill = order_name))
order0 + geom_bar(stat = "identity", colour = barlines)
order0 <- ggplot(plot.df, aes(x = SampleType, fill = order_name))
order0 + geom_bar(stat = "identity")
order0 <- ggplot(plot.df, aes(x = SampleType, y = order_name))
order0 + geom_bar(stat = "identity")
order0 <- ggplot(plot.df, aes(x = SampleType))
order0 + geom_bar()
order0 + geom_bar(aes(fill = order_name))
order0 + geom_bar(aes(fill = class_name))
order0 + geom_bar(aes(fill = order_name))
length(unique(plot.df$class_name))
length(unique(plot.df$class_name))  # we have
length(unique(plot.df$order_name))  # we have
order0 + geom_bar(aes(fill = order_name, colour=barlines))
tol28rainbow= c("#771155", "#AA4488", "#CC99BB", "#f7e9f7",
"#114477", "#4477AA", "#77AADD", "#e2effd",
"#117777", "#44AAAA", "#77CCCC", "#d9f0f0",
"#117744", "#44AA77", "#88CCAA", "#e0f0e6",
"#777711", "#AAAA44", "#DDDD77", "#eaeedf",
"#774411", "#AA7744", "#DDAA77", "#f6ebdd",
"#771122", "#AA4455", "#DD7788", "#fee8e3")
order0 + geom_bar(aes(fill = order_name)) +
scale_fill_manual(values = tol28rainbow)
library(reshape2)
otu.df <- master.df[,c(1,2,13)]
otu.mat <- dcast(otu.df, SampleID ~ OTUid, value.var = "CountReads")
row.names(otu.mat) <- otu.mat$SampleID
otu.mat$SampleID <- NULL
otufilt.mat = otu.mat[,colSums(otu.mat) > 4]  ## OTU must exist in at least 5 samples
otufilt.mat = otufilt.mat[rowSums(otufilt.mat) > 0,] ## removes empty rows from filtering above
rm(otu.df)
length(unique(plot.df$family_name))
otufilt.mat = otu.mat[,colSums(otu.mat) > 4]  ## OTU must exist in at least 5 samples
otufilt.mat = otufilt.mat[rowSums(otufilt.mat) > 0,] ## removes empty rows from filtering above
otu.df <- master.df[,c(1,2,13)]
otu.mat <- dcast(otu.df, SampleID ~ OTUid, value.var = "CountReads")
row.names(otu.mat) <- otu.mat$SampleID
otu.mat$SampleID <- NULL
View(otu.mat)
otufilt.mat = otu.mat[,colSums(otu.mat) > 4]  ## OTU must exist in at least 5 samples
otufilt.mat = otufilt.mat[rowSums(otufilt.mat) > 0,] ## removes empty rows from filtering above
otufilt10.mat = otufilt10.mat[rowSums(otufilt10.mat) > 0,]
otufilt.mat = otufilt.mat[rowSums(otufilt.mat) > 0,]
otu.df <- master.df[,c(1,2,13)]
otu.mat <- dcast(otu.df, SampleID ~ OTUid, value.var = "CountReads")
row.names(otu.mat) <- otu.mat$SampleID
otu.mat$SampleID <- NULL
otufilt.mat = otu.mat[,colSums(otu.mat) > 4]  ## OTU must exist in at least 5 samples
otufilt.mat = otu.mat[,colSums(otu.mat) > 11]  ## OTU must exist in at least 5 samples
library(data.table)
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/master.csv', header = T)
otu.df <- master.df[,c(1,2,13)]
otu.mat <- dcast(otu.df, SampleID ~ OTUid, value.var = "CountReads")
row.names(otu.mat) <- otu.mat$SampleID
otu.mat$SampleID <- NULL
otufilt.mat = otu.mat[,colSums(otu.mat) > 11]  ## OTU must exist in at least 5 samples
otufilt.mat = as.matrix(otu.mat[,colSums(otu.mat) > 4])  ## OTU must exist in at least 5 samples
View(otufilt.mat)
dd1 = otu.mat[,colSums(otu.mat) > 4]
dd1 <- otu.mat[,colSums(otu.mat) > 4]
detach("package:data.table", unload=TRUE)
otufilt.mat = as.matrix(otu.mat[,colSums(otu.mat) > 4])  ## OTU must exist in at least 5 samples
otufilt.mat = otufilt.mat[rowSums(otufilt.mat) > 0,] ## removes empty rows from filtering above
otufilt.mat = as.matrix(otu.mat[,colSums(otu.mat) > 4])  ## OTU must exist in at least 5 samples
otufilt.mat = otufilt.mat[rowSums(otufilt.mat) > 0,] ## removes empty rows from filtering above
otufilt.mat = as.matrix(otu.mat[,colSums(otu.mat) > 4])  ## OTU must exist in at least 5 samples
View(otufilt.mat)
otufilt.mat = otu.mat[,colSums(otu.mat) > 4]  ## OTU must exist in at least 5 samples
otufilter1 = otu.mat[,colSums(otu.mat) > 4]  ## OTU must exist in at least 5 samples
otu.mat[(colSums(otu.mat[,])>4),]
