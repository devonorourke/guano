MovieTitle <- c("PlanetEarth", "Python4dummies", "PlanetEarth", "KermitsAdventures", "FrogTales", "Platoon", "Platoon", "Platoon", "Platoon")
BarcodeID <- c("001", "003", "002", "101", "102", "103", "941", "942", "943", "944")
BarcodeID <- c("001", "003", "002", "101", "102", "941", "942", "943", "944")
sample.int(9)
sample.int(100)
?sample.int()
sample.int(9, 100)
seq(1, 9, by = 2)
sample.int(9)
Fees <- c(1,1,2,1,1,9,7,5,3)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
View(toy.df)
View(toy.df)
library(dplyr)
by_fees <- toy.df %>% group_by(Fees)
View(by_fees)
toy.df %>% group_by(User, MovieTitle, Fees)
mtcars %>%
group_by(cyl)
mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(disp), n = n())
toy.df %>%
group_by(User, MovieTitle, Fees) %>%
summarise(Fees, n())
toy.df %>% tally()
mtcars %>% tally()
mtcars
str(mtcars)
mtcars %>% count(cyl)
library(dplyr)
mtcars %>% count(cyl)
toy.df %>% count(Fees)
str(toy.df)
toy.df %>% count(User)
## generate a toy dataset
User <- rep(c("Abe", "Bud", "Cal"), times = c(2,3,4))
MovieTitle <- c("PlanetEarth", "Python4dummies", "PlanetEarth", "KermitsAdventures", "FrogTales", "Platoon", "Platoon", "Platoon", "Platoon")
BarcodeID <- c("001", "003", "002", "101", "102", "941", "942", "943", "944")
Fees <- c(1,1,2,1,1,9,7,5,3)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
toy.df %>% count(User)
toy.df %>% count(BarcodeID)
toy.df
toy.df %>%
summarise(total_fees = sum(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
str(toy.df)
toy.df <- as.data.frame(User, MovieTitle, BarcodeID, Fees)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
str(toy.df)
toy.df$User <- as.character(toy.df$User)
str(toy.df)
toy.df$MovieTitle <- as.character(toy.df$MovieTitle)
str(toy.df)
toy.df$BarcodeID <- as.character((toy.df$BarcodeID))
str(toy.df)
library(dplyr)
toy.df %>% count(BarcodeID)
toy.df %>%
summarise(total_fees = sum(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
toy.df %>%
summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
msleep %>%
summarise(avg_sleep = mean(sleep_total))
msleep
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(BarcodeID)
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
Fees <- c(1:9)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
str(toy.df)
library(dplyr)
toy.df %>% count(BarcodeID)
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Routput/master.csv', header = T)
library(plyr)
toy.df %>% count(BarcodeID)
toy.df %>% count(c(BarcodeID, Fees)
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(c(BarcodeID)
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(BarcodeID)
library(plyr)
count(mtcars, 'gear')
count(Fees)
count(BarcodeID, Fees)
count(c(BarcodeID, Fees))
count(toy.df(c('BarcodeID', 'Fees'))
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
count(toy.df(c(BarcodeID, Fees))
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
count(toy.df(BarcodeID, Fees))
detach("package:dplyr", unload=TRUE)
count(toy.df, Fees)
count(toy.df, 'Fees')
count(toy.df, 'BarcodeID')
count(toy.df, c('BarcodeID', 'Fees'))
count(toy.df, c('BarcodeID', 'User'))
count(toy.df, c('Fees', 'User'))
count(toy.df(User, Fees))
count(toy.df,c(User, Fees))
count(toy.df,c('User', 'Fees'))
count(toy.df,c'User')
count(toy.df,'User')
count(toy.df,'MovieTitle')
library(dplyr)
toy.df %>%
group_by(User) %>%
summarise(Fees = sum(Fees))
toy.df %>%
group_by(User, MovieTitle) %>%
summarise(Fees = sum(Fees))
toy.df[, sum(Fees), by = User]
library(data.table)
toy.df[, sum(Fees), by = User]
toy.df[, sum(Fees)]
toy.df[,sum(Fees), by = ]
toy.df[,list((Fees=sum(Fees)), by=User]
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
toy.df[,list((Fees=sum(Fees)), by=User]
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
toy.df[,list(Fees=sum(Fees)), by=User]
data = data.frame(Category=c("First","First","First","Second","Third", "Third", "Second"),
Frequency=c(10,15,5,2,14,20,3))
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
data[, lapply(.SD, sum), by = Category]
View(data)
data[, lapply(.SD, sum, na.rm=TRUE), by=category, .SDcols=c("a", "c", "z") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("First", "Second", "Third") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Frequency, .SDcols=c("Category") ]
a = data.table(index=1:5,a=rnorm(5,10),b=rnorm(5,10),z=rnorm(5,10))
b = data.table(index=6:10,a=rnorm(5,10),b=rnorm(5,10),c=rnorm(5,10),d=rnorm(5,10))
dt = merge(a,b,by=intersect(names(a),names(b)),all=T)
dt$category = sample(letters[1:3],10,replace=T)
dt[, lapply(.SD, sum, na.rm=TRUE), by=category, .SDcols=c("a", "c", "z") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Frequency, .SDcols=c("Category") ]
View(dt)
dt[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
toy.df[,sum(Fees), by=User]
toy.df[,sum(Fees),by=User]
toy.df[,sum(Fees),by=(User)]
toy.df[,sum(Fees),by=list(User)]
toy.df[,lapply(.SD,sum) by=User]
toy.df[,lapply(.SD,sum), by=User]
detach("package:dplyr", unload=TRUE)
library(data.table)
data[, sum(Frequency), by = Category]
install.packages('xml2')
install.packages('purrr')
install.packages("purrr")
library(xml2)
library(purrr)
doc <- xmlParse(http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera)
doc <- xmlParse("http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera")
x <- read_xml("http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera")
x_list <- as_list(x)
x_df <- x_list %>% map('record') %>% flatten() %>% map_df(flatten)
x %>% xml_find_all('//record') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//bin_uri') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//record_id') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//record') %>% map(as_list) %>% map_df(flatten)
xml_name(x)
xml_children(x)
baz <- xml_find_all(x, ".//phylum")
baz
xml_path(baz)
xml_attr(baz, "name")
xml_attr(baz, "taxon")
xml_attr(baz, "taxID")
baz <- xml_find_all(x, ".//taxonomy")
baz
xml_path(baz)
xml_attr(baz, "taxonomy")
xml_attr(baz, "phylum")
xml_attr(baz, "name")
y <- read_xml("<foo> <bar> text <baz/> </bar> </foo>")
y
x
y
xml_name(y)
xml_children(y)
xml_text(y)
xml_text(x)
xml_node(x)
?xml_node()
?xml_text()
xml_text(xml_find_all(x, "//x"))
xml_text(xml_find_all(x, "//phylum"))
xml_text(xml_find_all(x, "//class"))
phylum_name <- xml_text(xml_find_all(x, "//class"))
species_name <- xml_text(xml_find_all(x, "//species"))
xml_text(xml_find_all(x, "//species"))
phylum_name <- xml_text(xml_find_all(x, "//name"))
xml_text(xml_find_all(x, "//name"))
xml_children(x)
install.packages('XML')
library(XML)
xml.url <- “http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera”
xml.url <- "http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera"
xmlfile <- xmlTreeParse(xml.url)
class(xmlfile)
xmltop = xmlRoot(xmlfile)
print(xmltop)[1:2]
print(xmltop)[1:1]
xmlTree(tag = record)
xmlTree(tag = "record")
xmlTree(tag = "record", doc = xmlfile)
boldcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
bold_df <- data.frame(t(boldcat),row.names=NULL)
View(bold_df)
bold_df[1:5,1:4]
bold.df <- as.data.frame(boldcat)
bold.df <- data.frame(boldcat)
bold.df <- data.frame(t(boldcat))
View(bold.df)
tbolddf <- t(bold_df)
View(tbolddf)
rm(bold_df, boldcat, xmlfile, xmltop)
rm(bold.df)
strsplit(tbolddf, split = ',')
bold_df <- data.frame(tbolddf)
View(bold_df)
rm(tbolddf)
big.df <- data.frame(do.call('rbind', strsplit(as.character(bold_df$tbolddf),'|',fixed=TRUE)))
big.df <- data.frame(do.call('rbind', strsplit(as.character(bold_df$tbolddf),',',fixed=TRUE)))
colnames(bold_df) <- "col1"
big.df <- cbind(bold_df, read.table(text = as.character(bold_df$col1), sep = ","))
bold_df[1,1]
library(bold)
install.packages("bold")
detach("package:XML", unload=TRUE)
library(bold)
bold_megaloptera <- bold_seqspec(taxon='Megaloptera', sepfasta=TRUE)
bold_megaloptera$fasta[1:2]
rm(xml.url, big.df, bold_df)
processid <- bold_megaloptera$data$processid
bin_uri <- bold_megaloptera$data$bin_uri
phylum_name <- bold_megaloptera$data$phylum_name
class_name <- bold_megaloptera$data$class_name
order_name <- bold_megaloptera$data$order_name
family_name <- bold_megaloptera$data$family_name
genus_name <- bold_megaloptera$data$genus_name
species_name <- bold_megaloptera$data$species_name
lat <- bold_megaloptera$data$lat
lon <- bold_megaloptera$data$lon
country <- bold_megaloptera$data$country
image_urls <- bold_megaloptera$data$image_urls
genbank_accession <- bold_megaloptera$data$genbank_accession
fasta <- bold_megaloptera$fasta
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta)
View(my.df)
fasta_seq <- bold_megaloptera$fasta
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta_seq)
fasta_seq <- bold_megaloptera$fasta[1:1769]
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta_seq)
View(my.df)
fasta_seq <- bold_megaloptera$fasta[1:1]
ra <- c(1,1,0,0,0,0)
rb <- c(1,0,1,0,0,0)
rc <- c(0,0,1,1,1,0)
rd <- c(0,0,1,0,0,0)
re <- c(0,0,0,0,0,1)
mat <- rbind(ra,rb,rc,rd,re)
View(mat)
colnames(mat) <- c("s1-L1", "s2-L1", "s1-L2", "s2-L2", "s1-L3", "s2-L3")
View(mat)
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
subnames <- c("s1-L1", "s2-L3")
x <- subset(mat, rownames(mat) %in% subnames)
View(x)
x <- subset(mat, colnames(mat) %in% subnames)
x <- subset(mat, colnames(mat) %in% subnames)
rm(x)
colnames(mat) <- c("s1-G1", "s2-G1", "s3-G2", "s4-G2", "s5-G3", "s6-G3")
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
mat
ra <- c(1,2,0,0,0,0)
rb <- c(3,0,4,0,0,0)
rc <- c(0,0,5,6,7,0)
rd <- c(0,0,8,0,0,0)
re <- c(0,0,0,0,0,99)
mat <- rbind(ra,rb,rc,rd,re)
colnames(mat) <- c("s1-G1", "s2-G1", "s3-G2", "s4-G2", "s5-G3", "s6-G3")
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
dat.wide <- data.table(mat)
library(data.table)
dat.wide <- data.table(mat)
View(dat.wide)
myrownames <- rownames(mat)
dat.wide[, OTU := myrownames]
View(dat.wide)
dat.long <- melt(dat.wide)
View(dat.long)
dat.long[, c("sample","group") := tstrsplit(variable, split="-")]
dat.long[, variable := NULL]
View(dat.long)
unique.OTUs <- dat.long[, list(N=sum(value)), by=list(group, OTU)][, list(Ngroups=sum(N>0)), by=OTU][Ngroups==1]$OTU
dat.wide[OTU %in% unique.OTUs]
df_dupd <- dat.wide[! (OTU %in% unique.OTUs)]
View(df_dupd)
library(phyloseq)
setwd("~/Repos/guano/OahuBird/data/Routput/")
otutable.mat <- read.table(file="otutable.mat")
View(otutable.mat)
tax.mat <- read.table(file="tax.mat")
metaps.df <- read.table(file="metaps.df")
View(metaps.df)
OTU = otu_table(otutable.mat, taxa_are_rows = TRUE)
TAX = tax_table(tax.mat)
META = sample_data(metaps.df)
rownames(META) = sample_names(OTU)
physeq = phyloseq(OTU, TAX, META)
View(otutable.mat)
View(metaps.df)
View(tax.mat)
library(data.table)
setwd("~/Repos/guano/OahuBird/")
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/master.csv', header = T)
master.df$SampleID <- gsub("\\.", "-", master.df$SampleID)
h_otutable.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/amptk/OahuBird_h.otu_table.taxonomy.txt')
row.names(h_otutable.df) <- h_otutable.df$`#OTU ID`
samplelist <- unique(master.df$SampleID)
otutable.df <- subset(h_otutable.df, select = samplelist)
row.names(otutable.df) <- row.names(h_otutable.df)
otutable.df$rowsums <- rowSums(otutable.df[1:184])
otutable.df$rowsums
otutable.df$names <- rownames(otutable.df)
otutable.df <- subset(otutable.df, rowsums != 0)
row.names(otutable.df) <- otutable.df$names
otutable.df$names <- NULL
otutable.df$rowsums <- NULL
## convert to binary matrix
otutable.mat <- as.matrix((otutable.df > 0) + 0)
tax.df <- unique(master.df[,c(2,6:12)])
View(tax.df)
rownames(tax.df) <- tax.df$OTUid
tax.df$OTUid <- NULL
colnames(tax.df) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
tax.mat <- as.matrix(tax.df)
row.names(tax.mat) <- rownames(tax.df)
metaps.df <- unique(master.df[,c(1,15:19)])
metaps.df <- metaps.df[c(1:45, 47:185),]
rownames(metaps.df) <- metaps.df$SampleID
library(phyloseq)
OTU = otu_table(otutable.mat, taxa_are_rows = TRUE)
TAX = tax_table(tax.mat)
META = sample_data(metaps.df)
rownames(META) = sample_names(OTU)
physeq = phyloseq(OTU, TAX, META)
physeq
setwd("~/Repos/guano/OahuBird/data/Routput/")
library(ape)
mytree <- read.tree(file = "matched.tree")
physeq2 = merge_phyloseq(physeq, mytree)
physeq2
library(ggplot2)
?plot_richness()
p = plot_richness(GPst, x="Source", color="SampleType", measures=c("Observed", "Shannon", "Simpson"))
p = plot_richness(physeq2, x="Source", color="SampleType", measures=c("Observed", "Shannon", "Simpson"))
p + geom_point(size=5, alpha=0.7)
p + geom_point(size=5, alpha=0.5)
p + geom_point(size=2.2, alpha=0.5)
q = plot_bar(physeq2, "BirdSpecies", fill="Order")
q + geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack")
q + geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack",
title="Number of OTU detections defined by taxonomic Order per bird species")
q + geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack",
labs(title="Number of OTU detections defined by taxonomic Order per bird species")
# would want to relabel x-axis tick to reflect the first bar is "vegetation"; or could face out
# want to rename y axis label as "observed" (it's binary abundance...)
## basic ordination with vegan (didn't complete through NMDS plot...)
## 1) calculate distance:
library(vegan)
draup <- vegdist(otutable.mat, method="raup", binary=TRUE)
dbray <- vegdist(otutable.mat, method="bray", binary=TRUE)
djacc <- vegdist(otutable.mat, method="jaccard", binary=TRUE)
NMDSraup <- metaMDS(draup, distance = "raup", k = 2, trymax=10)
## see: https://chrischizinski.github.io/rstats/vegan-ggplot2/
data.scores <- as.data.frame(scores(NMDSraup))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
plot(NMDSraup, type = "t")
## basic ordination with phyloseq
distance(physeq2, method = "bray", binary = TRUE)
phyloseq::diversity(ps_obj, method = "jaccard", binary = TRUE)
## Calculate ordination
ojacc  <- ordinate(physeq2, "MDS", distance=djacc)
## ordination, modifying the phyloseq example
## get list of distance methods available and print
dist_methods <- unlist(distanceMethodList)
dist_methods
## select wanted methods
mydist_methods <- dist_methods[(c(8,16))]
mydist_methods
plist <- vector("list", length(mydist_methods))
names(plist) = mydist_methods
for( i in mydist_methods ){
# Calculate distance matrix
iDist <- distance(physeq2, method=i, binary = TRUE)
## Make plot
# Don't carry over previous plot (if error, p will be blank)
p <- NULL
# Create plot, store as temp variable, p
p <- plot_ordination(physeq2, iMDS, color="SampleType", shape="Source")
# Add title to each plot
p <- p + ggtitle(paste("MDS using distance method ", i, sep=""))
# Save the graphic to file.
plist[[i]] = p
}
print(plist[["jsd"]])
q + geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack",
labs(title="Number of OTU detections defined by taxonomic Order per bird species"))
q + geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack") +
labs(title="Number of OTU detections defined by taxonomic Order per bird species")
p + geom_point(size=2.2, alpha=0.5) + facet_grid(~"Source") + labs(color = "Guano source")
p = plot_richness(physeq2, x="Source", color="SampleType", measures=c("Observed", "Shannon", "Simpson"), facet_grid=Source)
p = plot_richness(physeq2, x="Source", color="SampleType", measures=c("Observed", "Shannon", "Simpson"))
p + geom_point(size=2.2, alpha=0.5) + labs(color = "Guano source" + facet_grid=Source)
p + geom_point(size=2.2, alpha=0.5) + labs(color = "Guano source" + facet_grid=~Source)
p + geom_point(size=2.2, alpha=0.5) + labs(color = "Guano source" + facet_grid=~Source)
p = plot_richness(physeq2, x="Source", color="SampleType", measures=c("Observed", "Shannon", "Simpson"),facet_grid=~Source)
p = plot_richness(physeq2, x="Source", color="SampleType", measures=c("Observed", "Shannon", "Simpson"))
p + geom_point(size=2.2, alpha=0.5) + labs(color = "Guano source")
q = plot_bar(physeq2, "BirdSpecies", fill="Order")
q + geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack") +
labs(title="Number of OTU detections defined by taxonomic Order per bird species")
plot_tree(physeq2)
plot_tree(physeq2, color="Source", label.tips="Class", ladderize="left", plot.margin=0.3)
?plot_tree()
plot_tree(physeq2, color="Source", ladderize="left", plot.margin=0.3)
plot_tree(physeq2, color="SampleType", ladderize="left", plot.margin=0.3)
plot_tree(physeq2, color=c("red", "blue"), shape = "SampleType", ladderize="left", plot.margin=0.3)
plot_tree(physeq2, color="SampleType", fill=c("red", "blue"), shape = "SampleType", ladderize="left", plot.margin=0.3)
plot_tree(physeq2, color="SampleType", shape = "SampleType", ladderize="left", plot.margin=0.3, size = 1)
t <- plot_tree(physeq2, color="SampleType", shape = "SampleType", ladderize="left", plot.margin=0.3)
t + geom_point(size = 1)
t
distance(physeq2, method = "bray", binary = TRUE)
library("vegan", lib.loc="/usr/local/lib/R/3.4/site-library")
distance(physeq2, method = "bray", binary = TRUE)
remove.packages("vegan")
install.packages("vegan")
install.packages("vegan")
install.packages("phyloseq")
packageVersion('phyloseq')
library(phyloseq)
plot_tree(physeq2, color="Order", shape="SampleType", label.tips="taxa_names", ladderize = "left", justify = "left", size = "Abundance")
plot_tree(physeq2, color="SampleType", shape="SampleType", label.tips="taxa_names", ladderize = "left", justify = "left", size = "Abundance")
taxa_names()
taxa_names(TAX)
plot_tree(physeq2, label.tips="taxa_names", ladderize = "left", justify = "left", size = "Abundance")
plot_tree(physeq2, color="SampleType", shape="SampleType", label.tips="taxa_names", ladderize = "left", justify = "left")
plot_tree(physeq2, color="SampleType", shape="SampleType", label.tips="taxa_names", justify = "left")
plot_tree(physeq2, color="SampleType", shape="SampleType", label.tips="taxa_names", ladderize = "true", justify = "left")
plot_tree(physeq2, color="SampleType", shape="SampleType", label.tips="taxa_names", ladderize = "left", justify = "left")
draup <- vegdist(otutable.mat, method="raup", binary=TRUE)
library(vegan)
draup <- vegdist(otutable.mat, method="raup", binary=TRUE)
dbray <- vegdist(otutable.mat, method="bray", binary=TRUE)
djacc <- vegdist(otutable.mat, method="jaccard", binary=TRUE)
NMDSraup <- metaMDS(draup, distance = "raup", k = 2, trymax=20)
data.scores <- as.data.frame(scores(NMDSraup))  #Using the scores function from vegan to extract the site scores and convert to a data.frame
str(NMDSraup)
data.scores$site <- rownames(data.scores)  # create a column of site names, from the rownames of data.scores
View(data.scores)
?scores()
NMDSraupK3 <- metaMDS(draup, distance = "raup", k = 3, trymax=20)
stressplot(NMDSraup)
plot(NMDSraup)
data(dune, dune.env)
View(dune.env)
View(dune)
View(otutable.mat)
tOTUtable <- t(otutable.mat)
View(tOTUtable)
draup <- vegdist(tOTUtable, method="raup", binary=TRUE)
colsums(tOTUtable)
colSums(tOTUtable)
