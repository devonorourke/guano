help <- 4*x
library(data.table)
reads.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/trim_OTUdropd.sorted.csv')
View(reads.df)
reads.mat <- as.matrix(reads.df[,-1])
namelist <- reads.df$otuID
rownames(reads.mat) <- namelist
maxRead.df <- data.frame(row.names = colnames(reads.mat),
MaxVal = apply(reads.mat, 2, max),
WhichMax = apply(reads.mat, 2, which.max))
maxRead.df$SampleID <- rownames(maxRead.df)
counter = (1:1907)
swap.df <- data.frame(counter, namelist)
reads.mat <- as.matrix(reads.df[,-1])
namelist <- reads.df$otuID
namelist <- reads.df$OTUid
rownames(reads.mat) <- namelist
maxRead.df <- data.frame(row.names = colnames(reads.mat),
MaxVal = apply(reads.mat, 2, max),
WhichMax = apply(reads.mat, 2, which.max))
maxRead.df$SampleID <- rownames(maxRead.df)
reads.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/trim_OTUdropd.sorted.csv')
reads.mat <- as.matrix(reads.df[,-1])
namelist <- reads.df$OTUid
rownames(reads.mat) <- namelist
maxRead.df <- data.frame(row.names = colnames(reads.mat),
MaxVal = apply(reads.mat, 2, max),
WhichMax = apply(reads.mat, 2, which.max))
maxRead.df$SampleID <- rownames(maxRead.df)
counter = (1:1907)
swap.df <- data.frame(counter, namelist)
colnames(swap.df) <- c("WhichMax", "OTUid")
Final.df <- merge(maxRead.df, swap.df)
Final.df$WhichMax <- NULL
View(Final.df)
View(swap.df)
View(maxRead.df)
str(reads.mat)
View(reads.mat)
which.max(reads.mat[1,])
which.max(reads.mat[2,])
which.max(reads.mat[3,])
summary(reads.mat)
max(reads.mat)
max(reads.mat[,1])
max(reads.mat[,2])
max(reads.mat[,3])
max(reads.mat[1,])
max(reads.mat[2,])
max(reads.mat[3,])
nrow(reads.mat)
ncol(reads.mat)
reads.mat[1,1]
View(reads.mat)
reads.mat[1,4]
col1max <- reads.mat[1,]
max(col1max)
col1max <- reads.mat[1,1:88]
max(col1max)
col1max
str(reads.mat)
col1max <- reads.mat[1,1:87]
max(col1max)
non_mock_max <- apply(reads.mat, 1, max)
non_mock_max
nonmock.mat <- reads.mat[,1:87]
View(nonmock.mat)
non_mock_max <- apply(nonmock.mat, 1, max)
non_mock_max
mock_vals <- reads.mat[,88]
df <- data.frame(non_mock_max, mock_vals)
df$perc <- (df$non_mock_max / df$mock_vals * 100)
View(df)
options(scipen = 999)
df$perc <- (df$non_mock_max / df$mock_vals * 100)
non_mock_sum <- apply(nonmock.mat, 1, sum)
df <- data.frame(non_mock_max, non_mock_sum, mock_vals)   ## creating data.frame from those three vectors
options(scipen = 999)   ## this converts the forthcoming `df$perc` values to be printed as intergers rather than in scientific notation
df$maxperc <- (df$non_mock_max / df$mock_vals * 100)
df$sumperc <- (df$non_mock_sum / df$mock_vals * 100)
x <- subset(df, mock_vals == 0)
df <- subset(df, mock_vals == 0)
rm(x)
View(df)
df <- data.frame(non_mock_max, non_mock_sum, mock_vals)   ## creating data.frame from those three vectors
options(scipen = 999)   ## this converts the forthcoming `df$perc` values to be printed as intergers rather than in scientific notation
df$maxperc <- (df$non_mock_max / df$mock_vals * 100)
df$sumperc <- (df$non_mock_sum / df$mock_vals * 100)
df <- subset(df, mock_vals != 0)
reads.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/trim_OTUdropd.sorted.csv')
reads.mat <- as.matrix(reads.df[,-1])
nonmock.mat <- reads.mat[,1:87]
non_mock_sum <- apply(nonmock.mat, 1, sum)
df <- data.frame(non_mock_sum, mock_vals)
mock_vals <- reads.mat[,88]
df <- data.frame(non_mock_sum, mock_vals)
options(scipen = 999)   ## this converts the forthcoming `df$perc` values to be printed as intergers rather than in scientific notation
df$sumperc <- (df$non_mock_sum / df$mock_vals * 100)
df <- subset(df, mock_vals != 0)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Perlut_metadata.csv', header = T)
library(data.table)
library(reshape2)
library(tidyr)
library(ggplot2)
library(dplyr)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Perlut_metadata.csv', header = T)
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Routput/master.csv', header = T)
rm(meta.df)
View(master.df)
library(vegan)
data("dune")
View(dune)
str(dune)
length(unique(master.df$OTUid))
length(unique(master.df$BOLDid))
length(unique(master.df$BOLDalt))
x = count(master.df, vars = c("BOLDalt", "OTUid"))
OTUperSiteWeek = count(master.df, vars = c("NestBox", "Date"))
library(plyr)
x = count(master.df, vars = c("BOLDalt", "OTUid"))
View(x)
duplicated(x)
duplicated(x$BOLDalt)
y = x[duplicated(x$BOLDalt),]
View(y)
a <- strrep("apple",1:3)
b <- strrep("banana",1:3)
c <- strrep("coconut",1:3)
a <- strrep("apple",:3)
a <- strrep("apple",3)
col1 <- rep(c("Abe", "Bud", "Cal"), times = c(2,3,4))
User <- rep(c("Abe", "Bud", "Cal"), times = c(2,3,4))
rm(col1)
rm(a,b,c)
MovieTitle <- c("PlanetEarth", "Python4dummies", "PlanetEarth", "KermitsAdventures", "FrogTales", "Platoon", "Platoon", "Platoon", "Platoon")
BarcodeID <- c("001", "003", "002", "101", "102", "103", "941", "942", "943", "944")
BarcodeID <- c("001", "003", "002", "101", "102", "941", "942", "943", "944")
sample.int(9)
sample.int(100)
?sample.int()
sample.int(9, 100)
seq(1, 9, by = 2)
sample.int(9)
Fees <- c(1,1,2,1,1,9,7,5,3)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
View(toy.df)
View(toy.df)
library(dplyr)
by_fees <- toy.df %>% group_by(Fees)
View(by_fees)
toy.df %>% group_by(User, MovieTitle, Fees)
mtcars %>%
group_by(cyl)
mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(disp), n = n())
toy.df %>%
group_by(User, MovieTitle, Fees) %>%
summarise(Fees, n())
toy.df %>% tally()
mtcars %>% tally()
mtcars
str(mtcars)
mtcars %>% count(cyl)
library(dplyr)
mtcars %>% count(cyl)
toy.df %>% count(Fees)
str(toy.df)
toy.df %>% count(User)
## generate a toy dataset
User <- rep(c("Abe", "Bud", "Cal"), times = c(2,3,4))
MovieTitle <- c("PlanetEarth", "Python4dummies", "PlanetEarth", "KermitsAdventures", "FrogTales", "Platoon", "Platoon", "Platoon", "Platoon")
BarcodeID <- c("001", "003", "002", "101", "102", "941", "942", "943", "944")
Fees <- c(1,1,2,1,1,9,7,5,3)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
toy.df %>% count(User)
toy.df %>% count(BarcodeID)
toy.df
toy.df %>%
summarise(total_fees = sum(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
str(toy.df)
toy.df <- as.data.frame(User, MovieTitle, BarcodeID, Fees)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
str(toy.df)
toy.df$User <- as.character(toy.df$User)
str(toy.df)
toy.df$MovieTitle <- as.character(toy.df$MovieTitle)
str(toy.df)
toy.df$BarcodeID <- as.character((toy.df$BarcodeID))
str(toy.df)
library(dplyr)
toy.df %>% count(BarcodeID)
toy.df %>%
summarise(total_fees = sum(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
toy.df %>%
summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
msleep %>%
summarise(avg_sleep = mean(sleep_total))
msleep
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(BarcodeID)
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
Fees <- c(1:9)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
str(toy.df)
library(dplyr)
toy.df %>% count(BarcodeID)
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Routput/master.csv', header = T)
library(plyr)
toy.df %>% count(BarcodeID)
toy.df %>% count(c(BarcodeID, Fees)
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(c(BarcodeID)
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(BarcodeID)
library(plyr)
count(mtcars, 'gear')
count(Fees)
count(BarcodeID, Fees)
count(c(BarcodeID, Fees))
count(toy.df(c('BarcodeID', 'Fees'))
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
count(toy.df(c(BarcodeID, Fees))
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
count(toy.df(BarcodeID, Fees))
detach("package:dplyr", unload=TRUE)
count(toy.df, Fees)
count(toy.df, 'Fees')
count(toy.df, 'BarcodeID')
count(toy.df, c('BarcodeID', 'Fees'))
count(toy.df, c('BarcodeID', 'User'))
count(toy.df, c('Fees', 'User'))
count(toy.df(User, Fees))
count(toy.df,c(User, Fees))
count(toy.df,c('User', 'Fees'))
count(toy.df,c'User')
count(toy.df,'User')
count(toy.df,'MovieTitle')
library(dplyr)
toy.df %>%
group_by(User) %>%
summarise(Fees = sum(Fees))
toy.df %>%
group_by(User, MovieTitle) %>%
summarise(Fees = sum(Fees))
toy.df[, sum(Fees), by = User]
library(data.table)
toy.df[, sum(Fees), by = User]
toy.df[, sum(Fees)]
toy.df[,sum(Fees), by = ]
toy.df[,list((Fees=sum(Fees)), by=User]
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
toy.df[,list((Fees=sum(Fees)), by=User]
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
toy.df[,list(Fees=sum(Fees)), by=User]
data = data.frame(Category=c("First","First","First","Second","Third", "Third", "Second"),
Frequency=c(10,15,5,2,14,20,3))
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
data[, lapply(.SD, sum), by = Category]
View(data)
data[, lapply(.SD, sum, na.rm=TRUE), by=category, .SDcols=c("a", "c", "z") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("First", "Second", "Third") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Frequency, .SDcols=c("Category") ]
a = data.table(index=1:5,a=rnorm(5,10),b=rnorm(5,10),z=rnorm(5,10))
b = data.table(index=6:10,a=rnorm(5,10),b=rnorm(5,10),c=rnorm(5,10),d=rnorm(5,10))
dt = merge(a,b,by=intersect(names(a),names(b)),all=T)
dt$category = sample(letters[1:3],10,replace=T)
dt[, lapply(.SD, sum, na.rm=TRUE), by=category, .SDcols=c("a", "c", "z") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Frequency, .SDcols=c("Category") ]
View(dt)
dt[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
toy.df[,sum(Fees), by=User]
toy.df[,sum(Fees),by=User]
toy.df[,sum(Fees),by=(User)]
toy.df[,sum(Fees),by=list(User)]
toy.df[,lapply(.SD,sum) by=User]
toy.df[,lapply(.SD,sum), by=User]
detach("package:dplyr", unload=TRUE)
library(data.table)
data[, sum(Frequency), by = Category]
install.packages('xml2')
install.packages('purrr')
install.packages("purrr")
library(xml2)
library(purrr)
doc <- xmlParse(http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera)
doc <- xmlParse("http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera")
x <- read_xml("http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera")
x_list <- as_list(x)
x_df <- x_list %>% map('record') %>% flatten() %>% map_df(flatten)
x %>% xml_find_all('//record') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//bin_uri') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//record_id') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//record') %>% map(as_list) %>% map_df(flatten)
xml_name(x)
xml_children(x)
baz <- xml_find_all(x, ".//phylum")
baz
xml_path(baz)
xml_attr(baz, "name")
xml_attr(baz, "taxon")
xml_attr(baz, "taxID")
baz <- xml_find_all(x, ".//taxonomy")
baz
xml_path(baz)
xml_attr(baz, "taxonomy")
xml_attr(baz, "phylum")
xml_attr(baz, "name")
y <- read_xml("<foo> <bar> text <baz/> </bar> </foo>")
y
x
y
xml_name(y)
xml_children(y)
xml_text(y)
xml_text(x)
xml_node(x)
?xml_node()
?xml_text()
xml_text(xml_find_all(x, "//x"))
xml_text(xml_find_all(x, "//phylum"))
xml_text(xml_find_all(x, "//class"))
phylum_name <- xml_text(xml_find_all(x, "//class"))
species_name <- xml_text(xml_find_all(x, "//species"))
xml_text(xml_find_all(x, "//species"))
phylum_name <- xml_text(xml_find_all(x, "//name"))
xml_text(xml_find_all(x, "//name"))
xml_children(x)
install.packages('XML')
library(XML)
xml.url <- “http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera”
xml.url <- "http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera"
xmlfile <- xmlTreeParse(xml.url)
class(xmlfile)
xmltop = xmlRoot(xmlfile)
print(xmltop)[1:2]
print(xmltop)[1:1]
xmlTree(tag = record)
xmlTree(tag = "record")
xmlTree(tag = "record", doc = xmlfile)
boldcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
bold_df <- data.frame(t(boldcat),row.names=NULL)
View(bold_df)
bold_df[1:5,1:4]
bold.df <- as.data.frame(boldcat)
bold.df <- data.frame(boldcat)
bold.df <- data.frame(t(boldcat))
View(bold.df)
tbolddf <- t(bold_df)
View(tbolddf)
rm(bold_df, boldcat, xmlfile, xmltop)
rm(bold.df)
strsplit(tbolddf, split = ',')
bold_df <- data.frame(tbolddf)
View(bold_df)
rm(tbolddf)
big.df <- data.frame(do.call('rbind', strsplit(as.character(bold_df$tbolddf),'|',fixed=TRUE)))
big.df <- data.frame(do.call('rbind', strsplit(as.character(bold_df$tbolddf),',',fixed=TRUE)))
colnames(bold_df) <- "col1"
big.df <- cbind(bold_df, read.table(text = as.character(bold_df$col1), sep = ","))
bold_df[1,1]
library(bold)
install.packages("bold")
detach("package:XML", unload=TRUE)
library(bold)
bold_megaloptera <- bold_seqspec(taxon='Megaloptera', sepfasta=TRUE)
bold_megaloptera$fasta[1:2]
rm(xml.url, big.df, bold_df)
processid <- bold_megaloptera$data$processid
bin_uri <- bold_megaloptera$data$bin_uri
phylum_name <- bold_megaloptera$data$phylum_name
class_name <- bold_megaloptera$data$class_name
order_name <- bold_megaloptera$data$order_name
family_name <- bold_megaloptera$data$family_name
genus_name <- bold_megaloptera$data$genus_name
species_name <- bold_megaloptera$data$species_name
lat <- bold_megaloptera$data$lat
lon <- bold_megaloptera$data$lon
country <- bold_megaloptera$data$country
image_urls <- bold_megaloptera$data$image_urls
genbank_accession <- bold_megaloptera$data$genbank_accession
fasta <- bold_megaloptera$fasta
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta)
View(my.df)
fasta_seq <- bold_megaloptera$fasta
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta_seq)
fasta_seq <- bold_megaloptera$fasta[1:1769]
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta_seq)
View(my.df)
fasta_seq <- bold_megaloptera$fasta[1:1]
ra <- c(1,1,0,0,0,0)
rb <- c(1,0,1,0,0,0)
rc <- c(0,0,1,1,1,0)
rd <- c(0,0,1,0,0,0)
re <- c(0,0,0,0,0,1)
mat <- rbind(ra,rb,rc,rd,re)
View(mat)
colnames(mat) <- c("s1-L1", "s2-L1", "s1-L2", "s2-L2", "s1-L3", "s2-L3")
View(mat)
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
subnames <- c("s1-L1", "s2-L3")
x <- subset(mat, rownames(mat) %in% subnames)
View(x)
x <- subset(mat, colnames(mat) %in% subnames)
x <- subset(mat, colnames(mat) %in% subnames)
rm(x)
colnames(mat) <- c("s1-G1", "s2-G1", "s3-G2", "s4-G2", "s5-G3", "s6-G3")
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
mat
ra <- c(1,2,0,0,0,0)
rb <- c(3,0,4,0,0,0)
rc <- c(0,0,5,6,7,0)
rd <- c(0,0,8,0,0,0)
re <- c(0,0,0,0,0,99)
mat <- rbind(ra,rb,rc,rd,re)
colnames(mat) <- c("s1-G1", "s2-G1", "s3-G2", "s4-G2", "s5-G3", "s6-G3")
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
dat.wide <- data.table(mat)
library(data.table)
dat.wide <- data.table(mat)
View(dat.wide)
myrownames <- rownames(mat)
dat.wide[, OTU := myrownames]
View(dat.wide)
dat.long <- melt(dat.wide)
View(dat.long)
dat.long[, c("sample","group") := tstrsplit(variable, split="-")]
dat.long[, variable := NULL]
View(dat.long)
unique.OTUs <- dat.long[, list(N=sum(value)), by=list(group, OTU)][, list(Ngroups=sum(N>0)), by=OTU][Ngroups==1]$OTU
dat.wide[OTU %in% unique.OTUs]
df_dupd <- dat.wide[! (OTU %in% unique.OTUs)]
View(df_dupd)
library(data.table)
library(reshape2)
library(tidyr)
library(ggplot2)
library(dplyr)
tmpfilt2.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/FilteredOTUs.csv', header = TRUE)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
View(tmpfilt2.df)
length(unique(tmpfilt2.df$SampleID))
unique(tmpfilt2.df$SampleID)
View(meta.df)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
View(meta.df)
meta.df <- meta.df[,c(3:8)]
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, 1, 3))
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, -3, 3))
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, -3, -1))
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, 3, 3))
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, 4, 6))
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, 4, 6))
meta.df <- meta.df[,c(4:9)]
colnames(meta.df) <- c("SamplingDate", "BirdSpecies", "Source", "VegNum", "SampleType", "SampleID")
master.df <- merge(tmpfilt2.df, meta.df)
View(tmpfilt2.df)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, 4, 6), sep = "")
meta.df <- meta.df[,c(4:9)]
colnames(meta.df) <- c("SamplingDate", "BirdSpecies", "Source", "VegNum", "SampleType", "SampleID")
master.df <- merge(tmpfilt2.df, meta.df)
View(master.df)
rm(tmpfilt2.df, meta.df)
setwd("~/Repos/guano/OahuBird/data/Routput/")
write.csv(master.df, "master.csv", row.names = F, quote = F)
detach("package:dplyr", unload=TRUE)
detach("package:data.table", unload=TRUE)
detach("package:reshape2", unload=TRUE)
detach("package:tidyr", unload=TRUE)
library(plyr)
setwd("~/Repos/guano/OahuBird/data/Routput/")
OTUperSample = count(master.df, vars = c("SampleID"))   # There are 99 remaining true samples (all bit one NTC has been filtered out)
View(OTUperSample)
View(master.df)
