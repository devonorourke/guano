xml_children(x)
baz <- xml_find_all(x, ".//phylum")
baz
xml_path(baz)
xml_attr(baz, "name")
xml_attr(baz, "taxon")
xml_attr(baz, "taxID")
baz <- xml_find_all(x, ".//taxonomy")
baz
xml_path(baz)
xml_attr(baz, "taxonomy")
xml_attr(baz, "phylum")
xml_attr(baz, "name")
y <- read_xml("<foo> <bar> text <baz/> </bar> </foo>")
y
x
y
xml_name(y)
xml_children(y)
xml_text(y)
xml_text(x)
xml_node(x)
?xml_node()
?xml_text()
xml_text(xml_find_all(x, "//x"))
xml_text(xml_find_all(x, "//phylum"))
xml_text(xml_find_all(x, "//class"))
phylum_name <- xml_text(xml_find_all(x, "//class"))
species_name <- xml_text(xml_find_all(x, "//species"))
xml_text(xml_find_all(x, "//species"))
phylum_name <- xml_text(xml_find_all(x, "//name"))
xml_text(xml_find_all(x, "//name"))
xml_children(x)
install.packages('XML')
library(XML)
xml.url <- “http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera”
xml.url <- "http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera"
xmlfile <- xmlTreeParse(xml.url)
class(xmlfile)
xmltop = xmlRoot(xmlfile)
print(xmltop)[1:2]
print(xmltop)[1:1]
xmlTree(tag = record)
xmlTree(tag = "record")
xmlTree(tag = "record", doc = xmlfile)
boldcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
bold_df <- data.frame(t(boldcat),row.names=NULL)
View(bold_df)
bold_df[1:5,1:4]
bold.df <- as.data.frame(boldcat)
bold.df <- data.frame(boldcat)
bold.df <- data.frame(t(boldcat))
View(bold.df)
tbolddf <- t(bold_df)
View(tbolddf)
rm(bold_df, boldcat, xmlfile, xmltop)
rm(bold.df)
strsplit(tbolddf, split = ',')
bold_df <- data.frame(tbolddf)
View(bold_df)
rm(tbolddf)
big.df <- data.frame(do.call('rbind', strsplit(as.character(bold_df$tbolddf),'|',fixed=TRUE)))
big.df <- data.frame(do.call('rbind', strsplit(as.character(bold_df$tbolddf),',',fixed=TRUE)))
colnames(bold_df) <- "col1"
big.df <- cbind(bold_df, read.table(text = as.character(bold_df$col1), sep = ","))
bold_df[1,1]
library(bold)
install.packages("bold")
detach("package:XML", unload=TRUE)
library(bold)
bold_megaloptera <- bold_seqspec(taxon='Megaloptera', sepfasta=TRUE)
bold_megaloptera$fasta[1:2]
rm(xml.url, big.df, bold_df)
processid <- bold_megaloptera$data$processid
bin_uri <- bold_megaloptera$data$bin_uri
phylum_name <- bold_megaloptera$data$phylum_name
class_name <- bold_megaloptera$data$class_name
order_name <- bold_megaloptera$data$order_name
family_name <- bold_megaloptera$data$family_name
genus_name <- bold_megaloptera$data$genus_name
species_name <- bold_megaloptera$data$species_name
lat <- bold_megaloptera$data$lat
lon <- bold_megaloptera$data$lon
country <- bold_megaloptera$data$country
image_urls <- bold_megaloptera$data$image_urls
genbank_accession <- bold_megaloptera$data$genbank_accession
fasta <- bold_megaloptera$fasta
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta)
View(my.df)
fasta_seq <- bold_megaloptera$fasta
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta_seq)
fasta_seq <- bold_megaloptera$fasta[1:1769]
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta_seq)
View(my.df)
fasta_seq <- bold_megaloptera$fasta[1:1]
ra <- c(1,1,0,0,0,0)
rb <- c(1,0,1,0,0,0)
rc <- c(0,0,1,1,1,0)
rd <- c(0,0,1,0,0,0)
re <- c(0,0,0,0,0,1)
mat <- rbind(ra,rb,rc,rd,re)
View(mat)
colnames(mat) <- c("s1-L1", "s2-L1", "s1-L2", "s2-L2", "s1-L3", "s2-L3")
View(mat)
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
subnames <- c("s1-L1", "s2-L3")
x <- subset(mat, rownames(mat) %in% subnames)
View(x)
x <- subset(mat, colnames(mat) %in% subnames)
x <- subset(mat, colnames(mat) %in% subnames)
rm(x)
colnames(mat) <- c("s1-G1", "s2-G1", "s3-G2", "s4-G2", "s5-G3", "s6-G3")
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
mat
ra <- c(1,2,0,0,0,0)
rb <- c(3,0,4,0,0,0)
rc <- c(0,0,5,6,7,0)
rd <- c(0,0,8,0,0,0)
re <- c(0,0,0,0,0,99)
mat <- rbind(ra,rb,rc,rd,re)
colnames(mat) <- c("s1-G1", "s2-G1", "s3-G2", "s4-G2", "s5-G3", "s6-G3")
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
dat.wide <- data.table(mat)
library(data.table)
dat.wide <- data.table(mat)
View(dat.wide)
myrownames <- rownames(mat)
dat.wide[, OTU := myrownames]
View(dat.wide)
dat.long <- melt(dat.wide)
View(dat.long)
dat.long[, c("sample","group") := tstrsplit(variable, split="-")]
dat.long[, variable := NULL]
View(dat.long)
unique.OTUs <- dat.long[, list(N=sum(value)), by=list(group, OTU)][, list(Ngroups=sum(N>0)), by=OTU][Ngroups==1]$OTU
dat.wide[OTU %in% unique.OTUs]
df_dupd <- dat.wide[! (OTU %in% unique.OTUs)]
View(df_dupd)
library(data.table)
tmpfilt2.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Routput/FilteredOTUs.csv', header = TRUE)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
View(meta.df)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
View(meta.df)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
View(meta.df)
meta.df$SampleID <- paste("OahuBird-", substr(meta.df$seqID, 4, 6), sep = "")
meta.df <- meta.df[,c(4:9)]
colnames(meta.df) <- c("SamplingDate", "BirdSpecies", "Source", "VegNum", "SampleType", "SampleID")
master.df <- merge(tmpfilt2.df, meta.df)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
meta.df$SampleID <- paste("OahuBird.", substr(meta.df$seqID, 4, 6), sep = "")
meta.df <- meta.df[,c(4:9)]
colnames(meta.df) <- c("SamplingDate", "BirdSpecies", "Source", "VegNum", "SampleType", "SampleID")
master.df <- merge(tmpfilt2.df, meta.df)
View(meta.df)
setwd("~/Repos/guano/BRIpompton/data/amptk/")
df <- read.csv(file = "mockIn.sorted.csv")
View(df)
df[c(1:4),c(100:104)]
head(df[grepl("NTC", names(df))])
ntc.df <- df[grepl("NTC", names(df))]
View(ntc.df)
row.names(ntc.df) <- row.names(df)
View(ntc.df)
row.names(ntc.df) <- df$OTUid
df <- read.csv(file = "mockIn.sorted.csv")
ntc.df <- df[grepl("NTC", names(df))]
ntc.df$OTUid <- df$OTUid
df <- read.csv(file = "mockIn.sorted.csv")
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid
ntc.df[apply(ntc.df, MARGIN = 1, function(x) any(x > 9)),]
is.na(ntc.df) <- ntc.df == 0
tmp <- ntc.df[apply(ntc.df, MARGIN = 1, function(x) any(x > 9)),] ## removes rows where no elements > 9, as we'll set `amptk --subtract` filter to == 10
View(tmp)
df <- read.csv(file = "mockIn.sorted.csv")
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid
tmp <- ntc.df[apply(ntc.df, MARGIN = 1, function(x) any(x > 9)),] ## removes rows where no elements > 9, as we'll set `amptk --subtract` filter to == 10
ntc.df <- ntc.df[apply(ntc.df, MARGIN = 1, function(x) any(x > 9)),] ## removes rows where no elements > 9, as we'll set `amptk --subtract` filter to == 10
is.na(ntc.df) <- ntc.df == 0
rm(tmp)
OTUavg <- rowMeans(ntc.df, na.rm = TRUE)
OTUavg
sort(OTUavg)
data.frame(OTUavg)
OTUavg <- data.frame(sort(rowMeans(ntc.df, na.rm = TRUE)))
View(OTUavg)
colnames(OTUavg) == "counts"
colnames(OTUavg) <- "counts"
df <- read.csv(file = "mockIn.sorted.csv")
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid   ## remember what the OTUids are; use rowname so you can do math on data.frame
ntc1.df <- ntc.df[apply(ntc.df, MARGIN = 1, function(x) any(x > 9)),]
is.na(ntc1.df) <- ntc1.df == 0
OTUavg <- data.frame(sort(rowMeans(ntc1.df, na.rm = TRUE)))
colnames(OTUavg) <- "counts"
ntc2.df <- ntc.df[apply(ntc.df, MARGIN = 1, function(x) max(x),]
ntc2.df <- ntc.df[apply(ntc.df, MARGIN = 1, which.max),]
df <- read.csv(file = "mockIn.sorted.csv")
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid   ## remember what the OTUids are; use rowname so you can do math on data.frame
View(df)
View(ntc.df)
ntc2.df <- ntc.df[apply(ntc.df, MARGIN = 1, which.max),]
ntc2.df <- apply(ntc.df, MARGIN = 1, which.max)
ntcRowmax <- apply(ntc.df, MARGIN = 1, which.max)
rowMaxs(ntc.df)
tmp2.df <- apply(ntc.df, 1, max)
tmp2.df <- ntc.df[apply(ntc.df, 1, max),]
View(tmp2.df)
ntcRowmax <- apply(ntc.df, 1, max)
ntcRowmax
ntcRowmax <- data.frame(apply(ntc.df, 1, max))
View(ntcRowmax)
rm(tmp2.df, ntc2.df)
colnames(ntcRowmax) <- "counts"
?sweep()
df1 <- df
df1 <- df[,-1]
View(df1)
View(df)
rownames(df1) <- df$OTUid
b <- sweep(df1,2,ntcRowmax$counts,"-")
View(b)
filt.df <- sweep(df1,2,ntcRowmax$counts,"-")
filt.df[filt.df<0] <- 0
rm(b)
View(filt.df)
View(df)
head(df[,(99:104)])
View(ntc.df)
head(df[,(99:104)])
View(df1)
filt.df <- sweep(df1,1,ntcRowmax$counts,"-")  ## for 'sweep' details see: https://bioinfomagician.wordpress.com/2014/08/12/my-favorite-commands-part3-sweep-function-in-r/
filt.df[filt.df<0] <- 0
head(filt.df[,(99:104)])
head(filt.df[,(99:103)])
head(filt.df[,(95:103)], 20)
head(filt.df[,(99:103)], 20)
View(ntc1.df)
View(ntcRowmax)
View(OTUavg)
OTUavg$names <- rownmaes(OTUavg)
OTUavg$names <- rownames(OTUavg)
View(OTUavg)
View(df)
setwd("~/Repos/guano/BRIpompton/data/amptk/")
df <- read.csv(file = "rough.cluster.otu_table.txt", sep = "\t")
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid   ## remember what the OTUids are; use rowname so you can do math on data.frame
ntcRowmax <- data.frame(apply(ntc.df, 1, max))
colnames(ntcRowmax) <- "counts"
df1 <- df[,-1]
rownames(df1) <- df$OTUid
filt.df <- sweep(df1,1,ntcRowmax$counts,"-")  ## for 'sweep' details see: https://bioinfomagician.wordpress.com/2014/08/12/my-favorite-commands-part3-sweep-function-in-r/
rm(df1)
filt.df[filt.df<0] <- 0
View(df)
filt.df$OTUid <- df$X.OTU.ID
colnames(filt.df$OTUid) <- "#OTU ID"
colnames(filt.df$OTUid)[104] <- "#OTU ID"
colnames(filt.df$OTUid)[,104] <- "#OTU ID"
tmp <- filt.df[,c(104,1:103)]
View(tmp)
filt.df <- filt.df[,c(104,1:103)]
rm(tmp)
source('~/.active-rstudio-document')
setwd("~/Repos/guano/BRIpompton/data/amptk/")
write.csv(filt.df, write.csv("NTCreduced.otu_table.csv", quote = F, row.names = FALSE)
write.csv(filt.df, file = "NTCreduced.otu_table.csv", quote = F, row.names = FALSE)
write.csv(filt.df, file = "NTCreduced.otu_table.csv", quote = F, row.names = FALSE, sep = ',')
write.csv(filt.df, file = "NTCreduced.otu_table.csv", quote = F, row.names = FALSE)
write.csv(filt.df, file = "NTCreduced.otu_table.csv", quote = F, row.names = FALSE, sep = "\t")
write.csv(filt.df, file = "NTCreduced.otu_table.csv", quote = F, row.names = FALSE, sep = '\t')
write.table(filt.df, file = "NTCreduced.otu_table.csv", quote = F, row.names = FALSE, sep = '\t')
write.table(filt.df, file = "NTCreduced.otu_table.txt", quote = F, row.names = FALSE, sep = '\t')
tmp <- sweep(df1,1,filt.df$mock.IM4p11.2,"-")
tmp <- sweep(filt.df,1,filt.df$mock.IM4p11.2,"-")
df <- read.csv(file = "rough.cluster.otu_table.txt", sep = "\t")
## pull out only negative samples (my samples always have the prefix "NTC"):
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid   ## remember what the OTUids are; use rowname so you can do math on data.frame
## find the highest value among NTC elements per row, then subtract that value from original df:
## first, find the maximum value in any NTC sample, per OTU:
ntcRowmax <- data.frame(apply(ntc.df, 1, max))
colnames(ntcRowmax) <- "counts"
## drop the OTUid column and keep as rowname
df1 <- df[,-1]
rownames(df1) <- df$OTUid
## subtract the max value of reads in any NTC sample observed among for each OTU across all samples in the original matrix
filt.df <- sweep(df1,1,ntcRowmax$counts,"-")  ## for 'sweep' details see: https://bioinfomagician.wordpress.com/2014/08/12/my-favorite-commands-part3-sweep-function-in-r/
rm(df1)
filt.df[filt.df<0] <- 0
tmp <- sweep(filt.df,1,filt.df$mock.IM4p11.2,"-")
View(tmp)
tmp <- sweep(filt.df,1,filt.df$mock.IM4p11.2,"-")
filt.df <- sweep(filt.df,1,filt.df$mock.IM4p11.2,"-")
filt.df[filt.df<0] <- 0   # set neg values back to zero again...
filt.df$OTUid <- df$X.OTU.ID  # adding back in the OTU column
filt.df <- filt.df[,c(104,1:103)] # positioning OTUid column back to first position
setwd("~/Repos/guano/BRIpompton/data/amptk/")
write.table(filt.df, file = "NTCreduced.otu_table.txt", quote = F, row.names = FALSE, sep = '\t')
setwd("~/Repos/guano/BRIpompton/data/amptk/")
df <- read.csv(file = "rough.cluster.otu_table.txt", sep = "\t")
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid   ## remember what the OTUids are; use rowname so you can do math on data.frame
ntcRowmax <- data.frame(apply(ntc.df, 1, max))
colnames(ntcRowmax) <- "counts"
df1 <- df[,-1]
rownames(df1) <- df$OTUid
filt.df <- sweep(df1,1,ntcRowmax$counts,"-")  ## for 'sweep' details see: https://bioinfomagician.wordpress.com/2014/08/12/my-favorite-commands-part3-sweep-function-in-r/
rm(df1)
filt.df[filt.df<0] <- 0
filt.df$OTUid <- df$X.OTU.ID  # adding back in the OTU column
filt.df <- filt.df[,c(104,1:103)] # positioning OTUid column back to first position
View(df)
df <- read.csv(file = "noFilt.sorted.csv")
View(df)
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid   ## remember what the OTUids are; use rowname so you can do math on data.frame
ntcRowmax <- data.frame(apply(ntc.df, 1, max))
View(ntcRowmax)
colnames(ntcRowmax) <- "counts"
df1 <- df[,-1]
rownames(df1) <- df$OTUid
filt.df <- sweep(df1,1,ntcRowmax$counts,"-")  ## for 'sweep' details see: https://bioinfomagician.wordpress.com/2014/08/12/my-favorite-commands-part3-sweep-function-in-r/
rm(df1)
filt.df[filt.df<0] <- 0
filt.df$OTUid <- df$X.OTU.ID  # adding back in the OTU column
filt.df <- filt.df[,c(104,1:103)] # positioning OTUid column back to first position
setwd("~/Repos/guano/BRIpompton/data/amptk/")
write.table(filt.df, file = "NTCreduced.otu_table.txt", quote = F, row.names = FALSE, sep = '\t')
setwd("~/Repos/guano/BRIpompton/data/amptk/")
df <- read.csv(file = "NTCfiltd.sorted.csv")
View(df)
cleand.df <- read.csv(file = "NTCfiltd.final.csv")
View(cleand.df)
sorted.df <- read.csv(file = "NTCfiltd.sorted.csv")
View(sorted.df)
df <- read.csv(file = "noFilt.final.csv")
View(filt.df)
ntc.df <- df[grepl("NTC", names(df))]
df <- read.csv(file = "noFilt.final.csv")
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid   ## remember what the OTUids are; use rowname so you can do math on data.frame
ntcRowmax <- data.frame(apply(ntc.df, 1, max))
colnames(ntcRowmax) <- "counts"
df1 <- df[,-1]
rownames(df1) <- df$OTUid
filt.df <- sweep(df1,1,ntcRowmax$counts,"-")  ## for 'sweep' details see: https://bioinfomagician.wordpress.com/2014/08/12/my-favorite-commands-part3-sweep-function-in-r/
rm(df1)
filt.df[filt.df<0] <- 0
filt.df$OTUid <- df$X.OTU.ID  # adding back in the OTU column
filt.df <- filt.df[,c(104,1:103)] # positioning OTUid column back to first position
setwd("~/Repos/guano/BRIpompton/data/amptk/")
write.table(filt.df, file = "NTCreduced.otu_table.txt", quote = F, row.names = FALSE, sep = '\t')
df <- read.csv(file = "noFilt.final.csv")
ntc.df <- df[grepl("NTC", names(df))]
row.names(ntc.df) <- df$OTUid   ## remember what the OTUids are; use rowname so you can do math on data.frame
ntcRowmax <- data.frame(apply(ntc.df, 1, max))
colnames(ntcRowmax) <- "counts"
df1 <- df[,-1]
rownames(df1) <- df$OTUid
filt.df <- sweep(df1,1,ntcRowmax$counts,"-")  ## for 'sweep' details see: https://bioinfomagician.wordpress.com/2014/08/12/my-favorite-commands-part3-sweep-function-in-r/
rm(df1)
filt.df[filt.df<0] <- 0
filt.df$OTUid <- df$X.OTU.ID  # adding back in the OTU column
filt.df <- filt.df[,c(104,1:103)] # positioning OTUid column back to first position
rm(df, ntc.df, ntcRowmax)
View(filt.df)
x <- subset(filt.df, OTUid != "pident")
x <- filt.df[grepl("pident", names(filt.df))]
x <- filt.df[grepl("pident", filt.df))]
x <- filt.df[grepl("pident", filt.df)]
x <- filt.df[grepl("pident", filt.df$OTUid)]
View(x)
d <- subset(filt.df, grepl(paste(pident, collapse= "|"), filt.df$OTUid))
x <- filt.df$OTUid[grep("pident", filt.df$OTUid) ]
x <- filt.df[grep("pident", filt.df$OTUid) ]
View(x)
x <- filt.df[grep("pident", filt.df$OTUid), ]
x <- filt.df[!grep("pident", filt.df$OTUid), ]
x <- filt.df[grep!("pident", filt.df$OTUid), ]
x <- filt.df[grep(!"pident", filt.df$OTUid), ]
x <- filt.df[! grepl("pident", filt.df$OTUid), ]
rm(x)
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
View(nonmock.df)
head(colnames(nonmock.df))
x <- subset(nonmock.df, mock.IM4p11.2 > 0)
View(x)
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rm(x)
inmockRowmax <- data.frame(apply(inmock, 1, max))
View(inmockRowmax)
rownames(inmock) <- inmock$OTUid
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
inmockRowmax <- data.frame(apply(inmock, 1, max))
colnames(inmockRowmax) <- "counts"
sum.x <- apply(inmock, MARGIN = 1, FUN = function(x) sum(x))
sum.x <- data.frame(apply(inmock, MARGIN = 1, FUN = function(x) sum(x)))
View(sum.x)
inmocksummary <- data.frame(apply(inmock, 1, max))
colnames(inmockRowmax) <- "counts"
rm(inmockRowmax)
inmocksummary$rowSums <- (apply(inmock, MARGIN = 1, FUN = function(x) sum(x)))
inmocksummary <- data.frame(apply(inmock, 1, max))
colnames(inmockRowmax) <- "rowMax"
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
inmocksummary <- data.frame(apply(inmock, 1, max))
colnames(inmockRowmax) <- "rowMax"
colnames(inmocksummary) <- "rowMax"
inmocksummary$rowSums <- (apply(inmock, MARGIN = 1, FUN = function(x) sum(x)))
View(inmocksummary)
View(inmock)
x <- colSums(inmock != 0)
x <- rowSums(inmock != 0)
inmocksummary$numHits <- rowSums(inmock != 0)
rm(x)
inmocksummary$mock.IM4p11.2 <- inmock$mock.IM4p11.2
inmocksummary$OTUavg <- (inmocksummary$rowSums) / (inmocksummary$numHits)
View(nonmock.df)
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
inmocksummary <- data.frame(rowSums(inmock != 0))
colnames(inmocksummary) <- "numHits"
x <- subset(inmocksummary, numHits > 1)
inmocksummary <- subset(inmocksummary, numHits > 1)
rm(x)
inmocksummary$rowMax <- data.frame(apply(inmock, 1, max))
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
inmocksummary <- data.frame(apply(inmock, 1, max))
colnames(inmocksummary) <- "rowMax"
inmocksummary$rowSums <- (apply(inmock, MARGIN = 1, FUN = function(x) sum(x)))
inmocksummary$numHits <- data.frame(rowSums(inmock != 0))
inmocksummary <- subset(inmocksummary, numHits > 1)
inmocksummary$OTUavg <- (inmocksummary$rowSums) / (inmocksummary$numHits)
inmocksummary$mock.IM4p11.2 <- inmock$mock.IM4p11.2
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
inmocksummary <- data.frame(apply(inmock, 1, max))
colnames(inmocksummary) <- "rowMax"
inmocksummary$rowSums <- (apply(inmock, MARGIN = 1, FUN = function(x) sum(x)))
inmocksummary$numHits <- data.frame(rowSums(inmock != 0))
inmocksummary$OTUavg <- (inmocksummary$rowSums) / (inmocksummary$numHits)
inmocksummary$mock.IM4p11.2 <- inmock$mock.IM4p11.2
inmocksummary <- subset(inmocksummary, numHits > 1)
inmocksummary <- subset(inmocksummary, numHits > 2)
## subset new dataframe containing all OTUid's not assigned to a mock community:
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
## subset that data.frame to include only values where the mock community have > 0 reads:
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
## find the max value among any sample for that OTU
inmocksummary <- data.frame(apply(inmock, 1, max))
colnames(inmocksummary) <- "rowMax"
## find the sum of each of these rows:
inmocksummary$rowSums <- (apply(inmock, MARGIN = 1, FUN = function(x) sum(x)))
## find number of samples with non-zero number of reads per row (per OTU)
inmocksummary$numHits <- data.frame(rowSums(inmock != 0))
## get an average of the number of reads per OTU
inmocksummary$OTUavg <- (inmocksummary$rowSums) / (inmocksummary$numHits)
## and add in the mock column only into the summary data.frame
inmocksummary$mock.IM4p11.2 <- inmock$mock.IM4p11.2
## remove instance where there are <= 2 samples (these OTUs only present in one sample that will be dropped regardless)
inmocksummary <- subset(inmocksummary, numHits > 1)
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
View(inmocksummary)
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
inmocksummary <- data.frame(apply(inmock, 1, max))
colnames(inmocksummary) <- "rowMax"
inmocksummary$rowSums <- (apply(inmock, MARGIN = 1, FUN = function(x) sum(x)))
inmocksummary$numHits <- data.frame(rowSums(inmock != 0))
## subset new dataframe containing all OTUid's not assigned to a mock community:
nonmock.df <- filt.df[! grepl("pident", filt.df$OTUid), ]
## subset that data.frame to include only values where the mock community have > 0 reads:
inmock <- subset(nonmock.df, mock.IM4p11.2 > 0)
rownames(inmock) <- inmock$OTUid
inmock$OTUid <- NULL
## find the max value among any sample for that OTU
inmocksummary <- data.frame(apply(inmock, 1, max))
colnames(inmocksummary) <- "rowMax"
## find the sum of each of these rows:
inmocksummary$rowSums <- (apply(inmock, MARGIN = 1, FUN = function(x) sum(x)))
inmocksummary$numHits <- rowSums(inmock != 0)
inmocksummary$OTUavg <- (inmocksummary$rowSums) / (inmocksummary$numHits)
inmocksummary$mock.IM4p11.2 <- inmock$mock.IM4p11.2
inmocksummary <- subset(inmocksummary, numHits > 1)
